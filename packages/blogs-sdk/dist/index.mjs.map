{"version":3,"sources":["../src/index.ts"],"sourcesContent":["// src/index.ts\nimport {\n  Post, PostsResponse, Category, CategoryResponse, Tag, TagResponse, Comment\n} from \"./types\";\n\n// Re-export types for users of the SDK\nexport * from \"./types\";\n\ninterface GetPostsParams {\n  category?: string;\n  tag?: string;\n  page?: number;\n  limit?: number;\n}\n\ninterface PostCommentParams {\n  postSlug: string;\n  content: string;\n  parentId?: string;\n  /** A JWT or session token for the end-user posting the comment. */\n  userToken: string;\n}\n\nexport class DITBlogsClient {\n  private apiKey: string;\n  private baseUrl: string;\n\n  constructor(apiKey: string) {\n    if (!apiKey) {\n      throw new Error(\"DITBlogsClient: API key is required.\");\n    }\n    this.apiKey = apiKey;\n    this.baseUrl = \"https://blogs.dishis.tech/api/v1\";\n  }\n\n  private async _request<T>(endpoint: string, options: RequestInit = {}): Promise<T> {\n    const url = `${this.baseUrl}${endpoint}`;\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${this.apiKey}`,\n      ...options.headers,\n    };\n\n    const response = await fetch(url, { ...options, headers });\n\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({ error: \"An unknown API error occurred.\" }));\n      throw new Error(`API Error (${response.status}): ${JSON.stringify(errorData.error)}`);\n    }\n    \n    // For 204 No Content response\n    if (response.status === 204) {\n      return undefined as T;\n    }\n\n    return response.json();\n  }\n\n  // --- Post Endpoints ---\n  public getPosts(params: GetPostsParams = {}): Promise<PostsResponse> {\n    const query = new URLSearchParams({\n      page: params.page?.toString() ?? '1',\n      limit: params.limit?.toString() ?? '10',\n      ...(params.category && { category: params.category }),\n      ...(params.tag && { tag: params.tag }),\n    }).toString();\n    return this._request<PostsResponse>(`/posts?${query}`);\n  }\n\n  public getPost(slug: string): Promise<Post> {\n    return this._request<Post>(`/posts/${slug}`);\n  }\n\n  // --- Category Endpoints ---\n  public getCategories(): Promise<Category[]> {\n    return this._request<Category[]>(`/categories`);\n  }\n  \n  public getCategory(slug: string, params: { page?: number, limit?: number } = {}): Promise<CategoryResponse> {\n     const query = new URLSearchParams({\n      page: params.page?.toString() ?? '1',\n      limit: params.limit?.toString() ?? '10',\n    }).toString();\n    return this._request<CategoryResponse>(`/categories/${slug}?${query}`);\n  }\n\n  // --- Tag Endpoints ---\n  public getTags(): Promise<Tag[]> {\n    return this._request<Tag[]>(`/tags`);\n  }\n\n  public getTag(slug: string, params: { page?: number, limit?: number } = {}): Promise<TagResponse> {\n     const query = new URLSearchParams({\n      page: params.page?.toString() ?? '1',\n      limit: params.limit?.toString() ?? '10',\n    }).toString();\n    return this._request<TagResponse>(`/tags/${slug}?${query}`);\n  }\n\n  // --- Comment Endpoints ---\n  public getComments(postSlug: string): Promise<Comment[]> {\n    const query = new URLSearchParams({ postSlug }).toString();\n    return this._request<Comment[]>(`/comments?${query}`);\n  }\n\n  public postComment({ postSlug, content, parentId, userToken }: PostCommentParams): Promise<Comment> {\n    return this._request<Comment>('/comments', {\n      method: 'POST',\n      headers: { \n        // Example of passing end-user auth alongside the org API key\n        'X-User-Authorization': `Bearer ${userToken}`\n      },\n      body: JSON.stringify({ postSlug, content, parentId }),\n    });\n  }\n}"],"mappings":";AAuBO,IAAM,iBAAN,MAAqB;AAAA,EAI1B,YAAY,QAAgB;AAC1B,QAAI,CAAC,QAAQ;AACX,YAAM,IAAI,MAAM,sCAAsC;AAAA,IACxD;AACA,SAAK,SAAS;AACd,SAAK,UAAU;AAAA,EACjB;AAAA,EAEA,MAAc,SAAY,UAAkB,UAAuB,CAAC,GAAe;AACjF,UAAM,MAAM,GAAG,KAAK,OAAO,GAAG,QAAQ;AACtC,UAAM,UAAU;AAAA,MACd,gBAAgB;AAAA,MAChB,iBAAiB,UAAU,KAAK,MAAM;AAAA,MACtC,GAAG,QAAQ;AAAA,IACb;AAEA,UAAM,WAAW,MAAM,MAAM,KAAK,EAAE,GAAG,SAAS,QAAQ,CAAC;AAEzD,QAAI,CAAC,SAAS,IAAI;AAChB,YAAM,YAAY,MAAM,SAAS,KAAK,EAAE,MAAM,OAAO,EAAE,OAAO,iCAAiC,EAAE;AACjG,YAAM,IAAI,MAAM,cAAc,SAAS,MAAM,MAAM,KAAK,UAAU,UAAU,KAAK,CAAC,EAAE;AAAA,IACtF;AAGA,QAAI,SAAS,WAAW,KAAK;AAC3B,aAAO;AAAA,IACT;AAEA,WAAO,SAAS,KAAK;AAAA,EACvB;AAAA;AAAA,EAGO,SAAS,SAAyB,CAAC,GAA2B;AACnE,UAAM,QAAQ,IAAI,gBAAgB;AAAA,MAChC,MAAM,OAAO,MAAM,SAAS,KAAK;AAAA,MACjC,OAAO,OAAO,OAAO,SAAS,KAAK;AAAA,MACnC,GAAI,OAAO,YAAY,EAAE,UAAU,OAAO,SAAS;AAAA,MACnD,GAAI,OAAO,OAAO,EAAE,KAAK,OAAO,IAAI;AAAA,IACtC,CAAC,EAAE,SAAS;AACZ,WAAO,KAAK,SAAwB,UAAU,KAAK,EAAE;AAAA,EACvD;AAAA,EAEO,QAAQ,MAA6B;AAC1C,WAAO,KAAK,SAAe,UAAU,IAAI,EAAE;AAAA,EAC7C;AAAA;AAAA,EAGO,gBAAqC;AAC1C,WAAO,KAAK,SAAqB,aAAa;AAAA,EAChD;AAAA,EAEO,YAAY,MAAc,SAA4C,CAAC,GAA8B;AACzG,UAAM,QAAQ,IAAI,gBAAgB;AAAA,MACjC,MAAM,OAAO,MAAM,SAAS,KAAK;AAAA,MACjC,OAAO,OAAO,OAAO,SAAS,KAAK;AAAA,IACrC,CAAC,EAAE,SAAS;AACZ,WAAO,KAAK,SAA2B,eAAe,IAAI,IAAI,KAAK,EAAE;AAAA,EACvE;AAAA;AAAA,EAGO,UAA0B;AAC/B,WAAO,KAAK,SAAgB,OAAO;AAAA,EACrC;AAAA,EAEO,OAAO,MAAc,SAA4C,CAAC,GAAyB;AAC/F,UAAM,QAAQ,IAAI,gBAAgB;AAAA,MACjC,MAAM,OAAO,MAAM,SAAS,KAAK;AAAA,MACjC,OAAO,OAAO,OAAO,SAAS,KAAK;AAAA,IACrC,CAAC,EAAE,SAAS;AACZ,WAAO,KAAK,SAAsB,SAAS,IAAI,IAAI,KAAK,EAAE;AAAA,EAC5D;AAAA;AAAA,EAGO,YAAY,UAAsC;AACvD,UAAM,QAAQ,IAAI,gBAAgB,EAAE,SAAS,CAAC,EAAE,SAAS;AACzD,WAAO,KAAK,SAAoB,aAAa,KAAK,EAAE;AAAA,EACtD;AAAA,EAEO,YAAY,EAAE,UAAU,SAAS,UAAU,UAAU,GAAwC;AAClG,WAAO,KAAK,SAAkB,aAAa;AAAA,MACzC,QAAQ;AAAA,MACR,SAAS;AAAA;AAAA,QAEP,wBAAwB,UAAU,SAAS;AAAA,MAC7C;AAAA,MACA,MAAM,KAAK,UAAU,EAAE,UAAU,SAAS,SAAS,CAAC;AAAA,IACtD,CAAC;AAAA,EACH;AACF;","names":[]}